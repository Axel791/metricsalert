// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/services/services.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/Axel791/metricsalert/internal/server/model/api"
	dto "github.com/Axel791/metricsalert/internal/server/model/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockMetric is a mock of Metric interface.
type MockMetric struct {
	ctrl     *gomock.Controller
	recorder *MockMetricMockRecorder
}

// MockMetricMockRecorder is the mock recorder for MockMetric.
type MockMetricMockRecorder struct {
	mock *MockMetric
}

// NewMockMetric creates a new mock instance.
func NewMockMetric(ctrl *gomock.Controller) *MockMetric {
	mock := &MockMetric{ctrl: ctrl}
	mock.recorder = &MockMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetric) EXPECT() *MockMetricMockRecorder {
	return m.recorder
}

// BatchMetricsUpdate mocks base method.
func (m *MockMetric) BatchMetricsUpdate(ctx context.Context, metrics []api.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchMetricsUpdate", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchMetricsUpdate indicates an expected call of BatchMetricsUpdate.
func (mr *MockMetricMockRecorder) BatchMetricsUpdate(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchMetricsUpdate", reflect.TypeOf((*MockMetric)(nil).BatchMetricsUpdate), ctx, metrics)
}

// CreateOrUpdateMetric mocks base method.
func (m *MockMetric) CreateOrUpdateMetric(ctx context.Context, metricAPI api.Metrics) (dto.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateMetric", ctx, metricAPI)
	ret0, _ := ret[0].(dto.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateMetric indicates an expected call of CreateOrUpdateMetric.
func (mr *MockMetricMockRecorder) CreateOrUpdateMetric(ctx, metricAPI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateMetric", reflect.TypeOf((*MockMetric)(nil).CreateOrUpdateMetric), ctx, metricAPI)
}

// GetAllMetric mocks base method.
func (m *MockMetric) GetAllMetric(ctx context.Context) ([]dto.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetric", ctx)
	ret0, _ := ret[0].([]dto.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetric indicates an expected call of GetAllMetric.
func (mr *MockMetricMockRecorder) GetAllMetric(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetric", reflect.TypeOf((*MockMetric)(nil).GetAllMetric), ctx)
}

// GetMetric mocks base method.
func (m *MockMetric) GetMetric(ctx context.Context, metricType, name string) (dto.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, metricType, name)
	ret0, _ := ret[0].(dto.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricMockRecorder) GetMetric(ctx, metricType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetric)(nil).GetMetric), ctx, metricType, name)
}

// MockSignService is a mock of SignService interface.
type MockSignService struct {
	ctrl     *gomock.Controller
	recorder *MockSignServiceMockRecorder
}

// MockSignServiceMockRecorder is the mock recorder for MockSignService.
type MockSignServiceMockRecorder struct {
	mock *MockSignService
}

// NewMockSignService creates a new mock instance.
func NewMockSignService(ctrl *gomock.Controller) *MockSignService {
	mock := &MockSignService{ctrl: ctrl}
	mock.recorder = &MockSignServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignService) EXPECT() *MockSignServiceMockRecorder {
	return m.recorder
}

// ComputedHash mocks base method.
func (m *MockSignService) ComputedHash(body []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputedHash", body)
	ret0, _ := ret[0].(string)
	return ret0
}

// ComputedHash indicates an expected call of ComputedHash.
func (mr *MockSignServiceMockRecorder) ComputedHash(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputedHash", reflect.TypeOf((*MockSignService)(nil).ComputedHash), body)
}

// Validate mocks base method.
func (m *MockSignService) Validate(token string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", token, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSignServiceMockRecorder) Validate(token, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSignService)(nil).Validate), token, body)
}
